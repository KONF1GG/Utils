import time
from typing import Literal
from mistralai import Mistral
from config import API_KEY

async def mistral(query: str, context: str = "", history: str = "", input_type: Literal['voice', 'csv', 'text'] = 'text'):
    client = Mistral(api_key=API_KEY)
    model = "mistral-large-latest"

    prompt_for_file = (
        "Ты - Фрида, бот помощник. Обработай файл таблицы по запросу. Если нет вопроса то просто опиши таблицу. Используй HTML теги где нужно что то выделить. Делай текст хорошо структурированным и понятным. НЕ ИСПОЛЬЗУЙ MARKDOWN. Только эти теги HTML (<b>, <i>, <a>, <code>, <pre>) НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ <ul> и <br>!"
        "Отвечай четко и кратко на вопрос и только на русском"
        "Вопрос: " + query + "\n"
        "Таблица: " + context

    )

    promt_for_voice = (
        "Ты - Фрида, бот помощник. Твой задача проанализировать вопрос и конекст звукового файла. Учитывай, что текст может содержать ошибки, поскольку был обработан из голосового сообщения. Если вопроса нет, отвечай согласно тексту голосового сообщения. Используй HTML теги где нужно что то выделить. Делай текст хорошо структурированным и понятным. НЕ ИСПОЛЬЗУЙ MARKDOWN. Только эти теги HTML (<b>, <i>, <a>, <code>, <pre>) НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ <ul> и <br>!"
        "Отвечай четко и кратко на вопрос и только на русском"
        "Вопрос: " + query + "\n"
        "Расшифрованное голосовое сообщение:" + context + "\n"
        "История диалога (бывает, что не связана с текущим запросом пользователя. Самое главное - это '3) Зпрос пользователя:' и твой ответ на него, при не однозначном запросе, нужно будет основываться именно на этом сообщении): " + history + '\n'

    )

    prompt = (
        "Ты — Фрида, бот-помощник компании Фридом. Твоя задача — отвечать на вопросы сотрудников компании, основываясь на предоставленных контекстах, содержащих важную информацию из статей.\n\n"
        
        "Инструкции:\n"
        
        "1. Прочитай внимательно вопрос и контекст. Если ответ на вопрос есть в контексте, дай короткий, четкий и точный ответ, "
        "включая все важные моменты, которые касаются запроса. Учитывай контекст диалога, обращай в большей степени внимение на '3) Зпрос пользователя:' (оно является предыдущим этому) Перечисли все пункты, ОБЯЗАТЕЛЬНО УКАЗАВ, из какой ССЫЛКИ они были взяты (Если только она не None), но не подписывай из какого по счету контекста, пользователь не будет знать этого!\n"
        "И не нужно одну и ту же ссылку несколько раз указывать"
        
        "2. Если в контексте нет ответа на вопрос, не придумывай ответ. Но если вопрос имеет общие аспекты (например, общие вопросы по SQL, программированию или другим дисциплинам), "
        "можешь использовать свои знания и дать ответ, не привязанный к контексту.\n"
        
        "3. Если вопрос касается чего-то, что явно локально или связано с нашей компанией (например, вопросы о 1C, тарифах, каких то иных услугах касающиеся компании), "
        "и ответа нет в контексте, постарайся ответить вежливо и сообщить, что необходимая информация в данный момент отсутствует, но она может быть доступна позже.\n"

        "4. Ответы должны быть короткими (Если иного не просят в запросе, например, 'расскажи подробнее'), но понятными, основанными на контексте, если он есть, и при необходимости предоставляй дополнительную информацию на основе твоих знаний.\n"

        "5. Если вопрос не связан с контекстом (например, общий вопрос типа 'Как дела?'), отвечай как на обычный разговорный вопрос, не используя контекст и не упоминая статьи.\n\n"
        
        "6. Используй HTML теги где нужно что то выделить. Делай текст хорошо структурированным и понятным. НЕ ИСПОЛЬЗУЙ MARKDOWN. Только эти теги HTML (<b>, <i>, <a>, <code>, <pre>) НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ <ul> и <br>!"

        "7. Также я прикрепляю историю вашего диалога. Ты должен учитывать его, например, если говорят рассказать подробнее, то это явно про предыдущее сообщение (они отправлены в таком порядке, что 3 сообщение = предыдущее)"
        "ТЕКУЩИЙ ЗАПРОС ПОЛЬЗОВАТЕЛЯ: " + query + "\n\n"  
        "Текст для анализа: " + context + "\n\n" 
        "История диалога (бывает, что не связана с текущим запросом пользователя. Самое главное - это '3) Зпрос пользователя:' и твой ответ на него, при не однозначном запросе, нужно будет основываться именно на этом сообщении): " + history + '\n'
        "Прошу тебя предоставить ответ только в том случае, если ответ действительно содержится в контексте, но если ты знаешь ответ на основе своих знаний, не стесняйся предоставить его, но уточни, что это может быть не точной информацией"
    )

    retries = 3  # Количество попыток
    delay = 2  # Задержка между попытками


    for _ in range(retries):
        try:
            chat_response = client.chat.complete(
                model=model,
                messages=[{
                    "role": "user",
                    "content": prompt_for_file if input_type == 'csv' else promt_for_voice if input_type == 'voice' else prompt,
                }]
            )

            # Если ответ получен без ошибки, возвращаем результат
            response_content = chat_response.choices[0].message.content
            return str(response_content)

        except Exception as e:
            print(f"Ошибка при запросе к API Mistral: {e}")
            time.sleep(delay)  # Задержка перед повторной попыткой

    # Если ошибка сохраняется после нескольких попыток
    return False
